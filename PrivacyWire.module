<?php namespace ProcessWire;

/**
 * PrivacyWire
 * This module adds management options for GDPR-relevant elements (loading maps, videos etc. only after accepting
 * external media) and cookies.
 *
 * @author blaueQuelle
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */
class PrivacyWire extends WireData implements Module, ConfigurableModule
{

    var $modulePath;
    var $moduleUrl;
    var $headContent = "";
    var $bodyContent = "";
    var $lang;

    public static function getModuleInfo()
    {
        return [
            'title' => "PrivacyWire",
            'summary' => "This module adds management options for GDPR-relevant elements (loading maps, videos etc. only after accepting external media) and cookies.",
            'author' => "blaueQuelle",
            'href' => "https://github.com/blaueQuelle/privacywire",
            'version' => 100,
            'autoload' => true,
            'singular' => true,
            'requires' => ["PHP>=7.2", "ProcessWire>=3.0.110"],
            'installs' => ["TextformatterPrivacyWire"],
            'icon' => 'eye-slash'
        ];
    }

    public function ready()
    {
        if (
            $this->wire('page')->template == 'admin' || // exclude admin pages
            $this->wire('page')->template == 'form-builder' // exclude from form-builder iframe
        ) {
            return;
        }

        $this->modulePath = $this->wire('config')->paths->$this;
        $this->moduleUrl = $this->wire('config')->urls->$this;
        $this->lang = ($this->wire('languages') && !$this->wire('user')->language->isDefault()) ? '__' . $this->wire('user')->language->id : '';

        // 1. Add some styling via inline CSS (if wanted, configured via backend)
        if ($this->add_basic_css_styling) {
            $this->renderPrivacyWireStyles();
        }

        // 2. Insert PrivacyWire Configuration Object as inline JS (hookable method if you want to override something)
        $this->renderPrivacyWireConfigAsInlineJs();

        // 3. Insert JS File (hookable method) - either modern ES6 version or legacy version with IE support.
        // Output modes: a) regular script tag b) ProCache script tag c) inline script
        $this->renderPrivacyWireCoreJs();

        // 4. Insert PrivacyWire Banner Markup
        $this->renderPrivacyWireBannerTemplate();

        // 5. Insert PrivacyWire Blueprint for Consent Window Markup
        $this->renderPrivacyWireConsentBlueprint();

        // 6. Render everything!
        if (!$this->render_manually) {
            $this->addHookAfter('Page::render', $this, 'render');
        }
    }

    public function render(HookEvent $event)
    {
        $event->return = str_replace("</head>", "{$this->headContent}</head>", $event->return);
        $event->return = str_replace("</body>", "{$this->bodyContent}</body>", $event->return);
    }

    public function ___renderPrivacyWireStyles()
    {
        $this->headContent .= "<style>" . file_get_contents($this->modulePath . "css/PrivacyWire.css") . "</style>";
    }

    public function ___renderPrivacyWireConfigAsInlineJs()
    {
        $this->headContent .= "<script>var PrivacyWireSettings={$this->getPrivacyWireConfigObject()};</script>";
    }

    public function ___renderPrivacyWireCoreJs()
    {
        $fileName = "js/PrivacyWire" . (($this->use_es6) ? '_es6' : '') . ".js";
        $filePath = $this->modulePath . $fileName;
        $fileUrl = $this->moduleUrl . $fileName;

        if ($this->output_mode === "regular") {
            $this->headContent .= "<script defer src='{$fileUrl}'></script>";
            return;
        }

        if ($this->output_mode === "procache" && $this->wire('modules')->isInstalled('ProCache') && $this->wire('modules')->get('ProCache')) {
            $this->headContent .= "<script defer src='". $this->wire('modules')->get('ProCache')->js($fileUrl) ."'></script>";
            return;
        }

        if ($this->output_mode === "inline") {
            $this->bodyContent .= "<script type='text/javascript'>" . file_get_contents($filePath) . "</script>";
        }
    }

    public function ___renderPrivacyWireBannerTemplate()
    {
        $sanitizedAlternateBannerPath = (substr($this->alternate_banner_template, 0, 1) !== "/") ? $this->alternate_banner_template : substr($this->alternate_banner_template, 1);

        $filePath = $this->wire('config')->paths->$this . 'PrivacyWireBanner.php';

        if (
            !empty($this->alternate_banner_template) &&
            file_exists($this->wire('config')->paths->root . $sanitizedAlternateBannerPath)) {
            $filePath = $this->wire('config')->paths->root . $sanitizedAlternateBannerPath;
        }

        $this->bodyContent .= wireRenderFile($filePath, ['module' => $this]);
    }

    public function ___renderPrivacyWireConsentBlueprint()
    {
        $filePath = $this->wire('config')->paths->$this . 'PrivacyWireConsentBlueprint.php';
        $this->bodyContent .= wireRenderFile($filePath, ['module' => $this]);
    }

    /**
     * Get the current PrivacyWire config options and output them as JSON Object
     * @return string   JSON Object of PrivacyWire config options
     */
    public function ___getPrivacyWireConfigObject(): string
    {
        $privacyWireSettings = new \StdClass;
        $privacyWireSettings->version = $this->version;
        $privacyWireSettings->dnt = ($this->respectDNT) ? "1" : "0";
        $privacyWireSettings->customFunction = ($this->wire('sanitizer')->text($this->trigger_custom_js_function)) ?? "";
        $privacyWireSettings->messageTimeout = ($this->messageTimeout && intval($this->messageTimeout) > 1) ? intval($this->messageTimeout) : 1500;
        $privacyWireSettings->consentByClass = ($this->detect_consents_by_class) ? "1" : "0";
        $privacyWireSettings->cookieGroups = [
            'necessary' => $this->get("cookies_necessary_label{$this->lang}|cookies_necessary_label"),
            'functional' => $this->get("cookies_functional_label{$this->lang}|cookies_functional_label"),
            'statistics' => $this->get("cookies_statistics_label{$this->lang}|cookies_statistics_label"),
            'marketing' => $this->get("cookies_marketing_label{$this->lang}|cookies_marketing_label"),
            'external_media' => $this->get("cookies_external_media_label{$this->lang}|cookies_external_media_label"),
        ];
        return json_encode($privacyWireSettings);
    }
}
